// <auto-generated />
using System;
using KahveAkademisi.BusinessLayer.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KahveAkademisi.BusinessLayer.Data.Migrations
{
    [DbContext(typeof(KahveAkademisiContext))]
    [Migration("20180910164152_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<int>("Language");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Tckn");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("VerifyCode");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddToCartDate");

                    b.Property<int?>("ProductAmountTypeId");

                    b.Property<int>("Quantity");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductAmountTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.ConvertedPayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlockageRateAmountMerchant");

                    b.Property<string>("BlockageRateAmountSubMerchant");

                    b.Property<string>("Currency");

                    b.Property<string>("IyziCommissionFee");

                    b.Property<string>("IyziCommissionRateAmount");

                    b.Property<string>("IyziConversionRate");

                    b.Property<string>("IyziConversionRateAmount");

                    b.Property<string>("MerchantPayoutAmount");

                    b.Property<string>("PaidPrice");

                    b.Property<string>("SubMerchantPayoutAmount");

                    b.HasKey("Id");

                    b.ToTable("ConvertedPayouts");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderStatus");

                    b.Property<double>("TotalPrice");

                    b.Property<int>("UserAddressId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("OrderId");

                    b.Property<int>("OrderStatus");

                    b.Property<int>("ProductAmountTypeId");

                    b.Property<double>("Quantity");

                    b.Property<double>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductAmountTypeId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.PaymentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlockageRate");

                    b.Property<string>("BlockageRateAmountMerchant");

                    b.Property<string>("BlockageRateAmountSubMerchant");

                    b.Property<string>("BlockageResolvedDate");

                    b.Property<int?>("ConvertedPayoutId");

                    b.Property<string>("ItemId");

                    b.Property<string>("IyziCommissionFee");

                    b.Property<string>("IyziCommissionRateAmount");

                    b.Property<string>("MerchantCommissionRate");

                    b.Property<string>("MerchantCommissionRateAmount");

                    b.Property<string>("MerchantPayoutAmount");

                    b.Property<string>("PaidPrice");

                    b.Property<int?>("PaymentResultId");

                    b.Property<string>("PaymentTransactionId");

                    b.Property<string>("Price");

                    b.Property<string>("SubMerchantKey");

                    b.Property<string>("SubMerchantPayoutAmount");

                    b.Property<string>("SubMerchantPayoutRate");

                    b.Property<string>("SubMerchantPrice");

                    b.Property<int?>("TransactionStatus");

                    b.HasKey("Id");

                    b.HasIndex("ConvertedPayoutId");

                    b.HasIndex("PaymentResultId");

                    b.ToTable("PaymentItems");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.PaymentResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthCode");

                    b.Property<string>("BasketId");

                    b.Property<string>("BinNumber");

                    b.Property<string>("CardAssociation");

                    b.Property<string>("CardFamily");

                    b.Property<string>("CardToken");

                    b.Property<string>("CardType");

                    b.Property<string>("CardUserKey");

                    b.Property<string>("ConnectorName");

                    b.Property<string>("Currency");

                    b.Property<int?>("FraudStatus");

                    b.Property<int?>("Installment");

                    b.Property<string>("IyziCommissionFee");

                    b.Property<string>("IyziCommissionRateAmount");

                    b.Property<string>("MerchantCommissionRate");

                    b.Property<string>("MerchantCommissionRateAmount");

                    b.Property<int>("OrderId");

                    b.Property<string>("PaidPrice");

                    b.Property<string>("PaymentId");

                    b.Property<string>("PaymentStatus");

                    b.Property<string>("Phase");

                    b.Property<string>("Price");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentResults");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("Discount");

                    b.Property<double>("DiscountAmount");

                    b.Property<DateTime>("DiscountFinishDate");

                    b.Property<DateTime>("DiscountStartDate");

                    b.Property<string>("LongDescription");

                    b.Property<string>("MainImage");

                    b.Property<string>("ProductName");

                    b.Property<int>("ProductStatus");

                    b.Property<string>("ShortDescription");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.ProductAmountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountType");

                    b.Property<bool>("Choice");

                    b.Property<string>("CreateUserId");

                    b.Property<double>("Price");

                    b.Property<int?>("ProductId");

                    b.Property<double>("Stock");

                    b.Property<string>("UpdateUserId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("ProductAmountTypes");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.ProductImageGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("ImageTitle");

                    b.Property<string>("ImageUrl");

                    b.Property<int?>("ProductId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("ProductImageGalleries");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<string>("AdressTitle");

                    b.Property<string>("City");

                    b.Property<string>("District");

                    b.Property<string>("Neighborhood");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UserId");

                    b.Property<string>("XAxis");

                    b.Property<string>("YAxis");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAdresses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.Cart", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.ProductAmountType", "ProductAmountType")
                        .WithMany()
                        .HasForeignKey("ProductAmountTypeId");

                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.Order", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.UserAddress", "UserAdress")
                        .WithMany()
                        .HasForeignKey("UserAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.OrderDetail", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("KahveAkademisi.Entities.DbModels.ProductAmountType", "ProductAmountType")
                        .WithMany()
                        .HasForeignKey("ProductAmountTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.PaymentItem", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.ConvertedPayout", "ConvertedPayout")
                        .WithMany()
                        .HasForeignKey("ConvertedPayoutId");

                    b.HasOne("KahveAkademisi.Entities.DbModels.PaymentResult", "PaymentResult")
                        .WithMany("PaymentItems")
                        .HasForeignKey("PaymentResultId");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.PaymentResult", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.Product", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId");

                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.ProductAmountType", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId");

                    b.HasOne("KahveAkademisi.Entities.DbModels.Product", "Product")
                        .WithMany("ProductAmountTypes")
                        .HasForeignKey("ProductId");

                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.ProductCategory", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("KahveAkademisi.Entities.DbModels.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.ProductImageGallery", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId");

                    b.HasOne("KahveAkademisi.Entities.DbModels.Product", "Product")
                        .WithMany("ProductImageGalleries")
                        .HasForeignKey("ProductId");

                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId");
                });

            modelBuilder.Entity("KahveAkademisi.Entities.DbModels.UserAddress", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser", "AppUser")
                        .WithMany("UserAdresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KahveAkademisi.Entities.DbModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
